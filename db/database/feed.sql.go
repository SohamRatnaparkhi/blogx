// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: feed.sql

package database

import (
	"context"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const getAllLikedPosts = `-- name: GetAllLikedPosts :many

SELECT id, user_id, title, body, likes, views, tags, created_at, updated_at
FROM posts
WHERE id IN (
        SELECT post_id
        FROM user_likes
        WHERE
            user_likes.user_id = $1
    )
ORDER BY
    likes,
    created_at DESC
`

func (q *Queries) GetAllLikedPosts(ctx context.Context, userID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllLikedPosts, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Likes,
			&i.Views,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPosts = `-- name: GetAllPosts :many

SELECT id, user_id, title, body, likes, views, tags, created_at, updated_at FROM posts ORDER BY created_at, likes DESC
`

func (q *Queries) GetAllPosts(ctx context.Context) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Likes,
			&i.Views,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllPostsPageWise = `-- name: GetAllPostsPageWise :many

SELECT id, user_id, title, body, likes, views, tags, created_at, updated_at
FROM posts
ORDER BY
    created_at,
    likes DESC
LIMIT $1
OFFSET $2
`

type GetAllPostsPageWiseParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllPostsPageWise(ctx context.Context, arg GetAllPostsPageWiseParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getAllPostsPageWise, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Likes,
			&i.Views,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostByPostId = `-- name: GetPostByPostId :one

SELECT id, user_id, title, body, likes, views, tags, created_at, updated_at FROM posts WHERE id = $1
`

func (q *Queries) GetPostByPostId(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, getPostByPostId, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Likes,
		&i.Views,
		pq.Array(&i.Tags),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPostsByTags = `-- name: GetPostsByTags :many

SELECT id, user_id, title, body, likes, views, tags, created_at, updated_at
FROM posts
WHERE tags @> $1 :: varchar []
ORDER BY created_at DESC
`

func (q *Queries) GetPostsByTags(ctx context.Context, dollar_1 []string) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByTags, pq.Array(dollar_1))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Likes,
			&i.Views,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserId = `-- name: GetPostsByUserId :many

SELECT id, user_id, title, body, likes, views, tags, created_at, updated_at FROM posts WHERE user_id = $1 ORDER BY created_at DESC
`

func (q *Queries) GetPostsByUserId(ctx context.Context, userID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Likes,
			&i.Views,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsByUserIdPageWise = `-- name: GetPostsByUserIdPageWise :many

SELECT id, user_id, title, body, likes, views, tags, created_at, updated_at
FROM posts
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetPostsByUserIdPageWiseParams struct {
	UserID uuid.UUID
	Limit  int32
	Offset int32
}

func (q *Queries) GetPostsByUserIdPageWise(ctx context.Context, arg GetPostsByUserIdPageWiseParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsByUserIdPageWise, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Likes,
			&i.Views,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostsOfFollowers = `-- name: GetPostsOfFollowers :many

SELECT DISTINCT id, user_id, title, body, likes, views, tags, created_at, updated_at
FROM posts
WHERE posts.user_id IN (
        SELECT following_id
        FROM user_followers
        WHERE follower_id = $1
    )
ORDER BY created_at DESC
`

func (q *Queries) GetPostsOfFollowers(ctx context.Context, followerID uuid.UUID) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, getPostsOfFollowers, followerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Post
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Body,
			&i.Likes,
			&i.Views,
			pq.Array(&i.Tags),
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePostViews = `-- name: UpdatePostViews :one

UPDATE posts SET views = views + 1 WHERE id = $1 RETURNING id, user_id, title, body, likes, views, tags, created_at, updated_at
`

func (q *Queries) UpdatePostViews(ctx context.Context, id uuid.UUID) (Post, error) {
	row := q.db.QueryRowContext(ctx, updatePostViews, id)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Body,
		&i.Likes,
		&i.Views,
		pq.Array(&i.Tags),
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
